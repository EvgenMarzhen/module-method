public class TestMethod {
    /*
    * Необходимо реализовать метод таким образом, чтобы он возвращал только дробную часть числа х.
    * Подсказка: вещественное число может быть преобразовано к целому путем отбрасывания дробной части.
    */
        public static double fraction(double x) {
            double d1 = (int)x;
            double frc = x-d1;
            return frc;
        }
    /*
    Необходимо реализовать метод таким образом, чтобы он возвращал результат сложения двух последних знаков числа х, предполагая, что знаков в числе не менее двух.
    Подсказки:
    int x=123%10; // х будет иметь значение 3
    int у=123/10; // у будет иметь значение 12
     */
    public static int sumLastNums(int x) {
        int y = (x%100)/10;
        int z = (x%100)%10;
        int sumLst = z + y;
        return sumLst;
    }

    /*
    Метод принимает символ х, который представляет собой один из “0 1 2 3 4 5 6 7 8 9”.
    Необходимо реализовать метод таким образом, чтобы он преобразовывал символ в соответствующее число.
    Подсказка: код символа ‘0’ — это число 48

    Пример:
    x=’3’
    результат: 3
     */
    public static int charToNum(char x) {
        int toNum = x - 48;
        return toNum;
    }
    /*
      Необходимо реализовать метод таким образом, чтобы он принимал число x и возвращал true если оно положительное.
        Пример 1:
        x=3
        результат: true
        Пример 2:
        x=-5
        результат: false
     */
    public static boolean isPositive(int x) {
        boolean positive = x > 0;
        return positive;
    }
    /*
    Необходимо реализовать метод таким образом, чтобы он принимал число x и возвращал true если оно двузначное.

        Пример 1:
        x=32
        результат: true
        Пример 2:
        x=516
        результат: false
     */
    public static boolean is2Digits(int x){
        boolean dig = x>9 && x<100 || x>-100 && x<-9;
        return dig;
    }

    /*
    Необходимо реализовать метод таким образом, чтобы он принимал символ x и возвращал true если это большая буква в диапазоне от ‘A’ до ‘Z’.
        Пример 1:
        x=’D’
        результат: true
        Пример 2:
        x=’q’
        результат: false
     */
    public static boolean isUpperCase(char x){
        return x>='A' && x<='Z';
    }
    /*
    Метод принимает левую и правую границу (a и b) некоторого числового диапазона. Необходимо реализовать метод таким образом, чтобы он возвращал true, если num входит в указанный диапазон (включая границы).
    Обратите внимание, что отношение a и b заранее неизвестно (неясно кто из них больше, а кто меньше)
        Пример 1:
        a=5 b=1 num=3
        результат: true
     */
    public static boolean isInRange(int a, int b, int num) {
        return (a >= num && b <= num) || (a <= num && b >= num);
    }
    /*
    Необходимо реализовать метод таким образом, чтобы он возвращал true если любое из принятых чисел делит другое нацело.
    Пример 1:
    a=3 b=6
    результат: true
     */
    public static boolean isDivisor (int a, int b){
        return a%b == 0 || b%a == 0;
    }
    /*
    Необходимо реализовать метод таким образом, чтобы он возвращал true если все три полученных методом числа равны
        Пример 1:
        a=3 b=3 с=3
        результат: true
     */
    public static boolean isEqual (int a, int b, int c){
        return a==b && b==c;
    }
    /*
    Выполните с его помощью последовательное сложение пяти чисел: 5, 11, 123, 14, 1, и результат выведите на экран. Постарайтесь выполнить задачу,
    используя минимально возможное количество вспомогательных переменных.

    Ответом на данное задание является код метода main, в котором происходит вызов данной функции.
    Решение выполняется в таком порядке:

    5+11 это 6
    6+123 это 9
    9+14 это 13
    13+1 это 4
    Итого 4
     */
    public static int lastNumSum(int a, int b){
        return (a%10)+(b%10);
    }
}



